import streamlit as st
import pandas as pd
import joblib

# Load the model
model = joblib.load("final_model.pkl")

# Sidebar for page navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Aper√ßu G√©n√©ral", "Tester mon modele de Scoring"])

if page == "Aper√ßu G√©n√©ral":
    st.title("Scoring de cr√©dit bancaire")

    st.write("""
    ---

    Je suis Presley Koyaweda, ravi de partager avec vous mon projet de scoring de cr√©dit bancaire.

    ### üéØ **Objectif**
    Ce projet visait √† d√©velopper un mod√®le capable de pr√©dire la probabilit√© de d√©faut de paiement des emprunteurs aupr√®s des banques.
         
    ### üöÄ **√âtapes du Projet**
    1. Exploration des Donn√©es.
    2. Discr√©tisation des Variables.
    3. Analyse des Correspondances Multiples (ACM)
    4. Calcul du V de Cramer.
    5. Mod√©lisation
    6. Mise en production
         
    ### üìä **R√©sultats**
    Les r√©sultats de notre analyse montrent que l'Analyse Discriminante Lin√©aire (LDA) avec des caract√©ristiques polynomiales offre des performances solides parmi les mod√®les test√©s. Voici les mesures de qualit√© obtenues :

    - Pr√©cision (Precision) : 86.25%
    - Rappel (Recall) : 95.83%
    - Score F1 (F1 Score) : 86.25%
    - Exactitude (Accuracy) : 76.33%

    Ces r√©sultats indiquent que l'Analyse Discriminante Lin√©aire est efficace pour pr√©dire la solvabilit√© des emprunteurs dans ce projet.

    ### üåü **Conclusion**
    Ce projet permet de pr√©dire efficacement la solvabilit√© des emprunteurs, offrant ainsi une aide pr√©cieuse pour les d√©cisions de cr√©dit des institutions financi√®res. Nous avons particuli√®rement cherch√© √† augmenter le rappel (recall) afin de minimiser les chances de refuser un cr√©dit √† ceux qui le m√©ritent vraiment.
    Car Il est pire de classer un client comme bon alors qu'il est mauvais que de classer un client comme mauvais alors qu'il est bon.
    """)

    # Display images in a 2x2 grid
    col1, col2 = st.columns(2)

    with col1:
        st.image("learning_curve.png", caption="Learning Curve")
        st.image("plan_factoriel.png", caption="Plan Factoriel des Individus")
    
    with col2:
        st.image("v_de_cramer.png", caption="Pouvoir Discriminant des Variables (V de Cramer)")
        st.image("precision_recall_curve.png", caption="Precision and Recall Curve")

elif page == "Tester mon modele de Scoring":
    st.title("Scoring de cr√©dit bancaire")

    st.write("""
    Testez ce mod√®le en remplissant le formulaire ci-dessous pour obtenir une √©valuation de la solvabilit√©.

    ###### Veuillez renseigner tous les champs
    """)

    # Instructions for categorization in the sidebar
    st.header('Instructions de Cat√©gorisation des Variables')
    st.write("""

Pour faciliter l'analyse des donn√©es, nous avons cat√©goris√© les variables en fonction de leurs valeurs.

#### Account_Balance (Statut du compte courant existant)
- **Cat√©gorie 1**: ... < 0 DM
- **Cat√©gorie 2**: 0 <= ... < 200 DM
- **Cat√©gorie 3**: ... >= 200 DM / salaire assign√© pour au moins 1 an
- **Cat√©gorie 4**: pas de compte courant

#### Payment_Status_of_Previous_Credit (Statut du paiement du cr√©dit pr√©c√©dent)
- **Cat√©gorie 1**: aucun cr√©dit / tous les cr√©dits rembours√©s √† temps
- **Cat√©gorie 2**: tous les cr√©dits dans cette banque rembours√©s √† temps
- **Cat√©gorie 3**: cr√©dits existants rembours√©s √† temps jusqu'√† maintenant
- **Cat√©gorie 4**: retard dans le remboursement par le pass√©
- **Cat√©gorie 5**: compte critique / autres cr√©dits existants (pas dans cette banque)

#### Duration_Category (Cat√©gorie de la dur√©e de cr√©dit)
- **Cat√©gorie 1**: Dur√©e < 12 mois
- **Cat√©gorie 2**: 12 mois <= Dur√©e < 18 mois
- **Cat√©gorie 3**: 18 mois <= Dur√©e < 24 mois
- **Cat√©gorie 4**: Dur√©e >= 24 mois

#### Value_Savings_Stocks (Compte d'√©pargne / obligations)
- **Cat√©gorie 1**: ... < 100 DM
- **Cat√©gorie 2**: 100 <= ... < 500 DM
- **Cat√©gorie 3**: 500 <= ... < 1000 DM
- **Cat√©gorie 4**: ... >= 1000 DM
- **Cat√©gorie 5**: inconnu / pas de compte d'√©pargne

#### Purpose (But du cr√©dit)
- **Cat√©gorie 1**: voiture (neuve)
- **Cat√©gorie 2**: voiture (d'occasion)
- **Cat√©gorie 3**: meubles / √©quipements
- **Cat√©gorie 4**: radio / t√©l√©vision
- **Cat√©gorie 5**: appareils domestiques
- **Cat√©gorie 6**: r√©parations
- **Cat√©gorie 7**: √©ducation
- **Cat√©gorie 8**: (vacances - n'existe pas?)
- **Cat√©gorie 9**: reconversion
- **Cat√©gorie 10**: business
- **Cat√©gorie 11**: autres

#### Mount_Category (Cat√©gorie du montant de cr√©dit)
- **Cat√©gorie 1**: Montant < 1365 DM
- **Cat√©gorie 2**: 1365 DM <= Montant < 2319 DM
- **Cat√©gorie 3**: 2319 DM <= Montant < 3972 DM
- **Cat√©gorie 4**: Montant >= 3972 DM

#### Most_valuable_available_asset (Propri√©t√©)
- **Cat√©gorie 1**: immobilier
- **Cat√©gorie 2**: si pas A121 : contrat d'√©pargne-logement / assurance vie
- **Cat√©gorie 3**: si pas A121 / A122 : voiture ou autre, pas dans l'attribut 6
- **Cat√©gorie 4**: inconnu / pas de propri√©t√©

#### Type_of_apartment (Logement)
- **Cat√©gorie 1**: location
- **Cat√©gorie 2**: propre
- **Cat√©gorie 3**: gratuitement

#### Length_of_current_employment (Emploi actuel depuis)
- **Cat√©gorie 1**: sans emploi
- **Cat√©gorie 2**: ... < 1 an
- **Cat√©gorie 3**: 1 <= ... < 4 ans
- **Cat√©gorie 4**: 4 <= ... < 7 ans
- **Cat√©gorie 5**: ... >= 7 ans

#### Age_category (Cat√©gorie d'√¢ge)
- **Cat√©gorie 1**: √Çge < 27 ans
- **Cat√©gorie 2**: 27 ans <= √Çge < 33 ans
- **Cat√©gorie 3**: 33 ans <= √Çge < 37 ans
- **Cat√©gorie 4**: √Çge >= 37 ans

#### Concurrent_Credits (Cr√©dits concurrents)
- **Cat√©gorie 1**: aucun
- **Cat√©gorie 2**: co-demandeur
- **Cat√©gorie 3**: garant

#### Sex_Marital_Status (Statut personnel et sexe)
- **Cat√©gorie 1**: homme : divorc√© / s√©par√©
- **Cat√©gorie 2**: femme : divorc√©e / s√©par√©e / mari√©e
- **Cat√©gorie 3**: homme : c√©libataire
- **Cat√©gorie 4**: homme : mari√© / veuf
- **Cat√©gorie 5**: femme : c√©libataire                 


    """)

    # Create a form for user input
    st.sidebar.header('Input Parameters')

    def user_input_features():
        account_balance = st.sidebar.number_input('Account Balance', min_value=1, max_value=4, value=1)
        payment_status = st.sidebar.number_input('Payment Status of Previous Credit', min_value=1, max_value=5, value=1)
        duration_category = st.sidebar.number_input('Duration Category', min_value=1, max_value=4, value=1)
        value_savings_stocks = st.sidebar.number_input('Value Savings Stocks', min_value=1, max_value=5, value=1)
        purpose = st.sidebar.number_input('Purpose', min_value=1, max_value=11, value=1)
        mount_category = st.sidebar.number_input('Mount Category', min_value=1, max_value=4, value=1)
        most_valuable_available_asset = st.sidebar.number_input('Most Valuable Available Asset', min_value=1, max_value=4, value=1)
        type_of_apartment = st.sidebar.number_input('Type of Apartment', min_value=1, max_value=3, value=1)
        length_of_current_employment = st.sidebar.number_input('Length of Current Employment', min_value=1, max_value=5, value=1)
        age_category = st.sidebar.number_input('Age Category', min_value=1, max_value=4, value=1)
        concurrent_credits = st.sidebar.number_input('Concurrent Credits', min_value=1, max_value=3, value=1)
        sex_marital_status = st.sidebar.number_input('Sex Marital Status', min_value=1, max_value=5, value=1)

        data = {
            'Account_Balance': account_balance,
            'Payment_Status_of_Previous_Credit': payment_status,
            'Duration_Category': duration_category,
            'Value_Savings_Stocks': value_savings_stocks,
            'Purpose': purpose,
            'Mount_Category': mount_category,
            'Most_valuable_available_asset': most_valuable_available_asset,
            'Type_of_apartment': type_of_apartment,
            'Length_of_current_employment': length_of_current_employment,
            'Age_category': age_category,
            'Concurrent_Credits': concurrent_credits,
            'Sex_Marital_Status': sex_marital_status
        }
        features = pd.DataFrame(data, index=[0])
        return features

    input_df = user_input_features()

    # Display user input
    st.subheader('User Input parameters')
    st.write(input_df)

    # Prediction
    if st.button('Pr√©dire'):
        prediction_proba = model.predict_proba(input_df)
        prediction = (prediction_proba[:, 1] > 0.5).astype(int)  # Assuming 0.5 as the threshold

        # Convert prediction to readable result
        if prediction[0] == 0:
            result = "Non Solvable"
        else:
            result = "Solvable"

        st.subheader('Prediction')
        st.write(result)
